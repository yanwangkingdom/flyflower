package com.yw.ffmpegj.libavutil;



import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.yw.ffmpegj.libavutil.AVUtilLibrary.AVDictionary;

import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>AVUtil-opt</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVUtil_Opt implements Library {
	/*public static final String JNA_LIBRARY_NAME = "AVUtil-opt";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(AVUtilOptLibrary.JNA_LIBRARY_NAME);
	static {
		Native.register(AVUtil_Opt.JNA_LIBRARY_NAME);
	}*/
	/**
	 * <i>native declaration : line 215</i><br>
	 * enum values
	 */
	public static interface AVOptionType {
		/** <i>native declaration : line 216</i> */
		public static final int AV_OPT_TYPE_FLAGS = 0;
		/** <i>native declaration : line 217</i> */
		public static final int AV_OPT_TYPE_INT = 1;
		/** <i>native declaration : line 218</i> */
		public static final int AV_OPT_TYPE_INT64 = 2;
		/** <i>native declaration : line 219</i> */
		public static final int AV_OPT_TYPE_DOUBLE = 3;
		/** <i>native declaration : line 220</i> */
		public static final int AV_OPT_TYPE_FLOAT = 4;
		/** <i>native declaration : line 221</i> */
		public static final int AV_OPT_TYPE_STRING = 5;
		/** <i>native declaration : line 222</i> */
		public static final int AV_OPT_TYPE_RATIONAL = 6;
		/**
		 * < offset must point to a pointer immediately followed by an int for the length<br>
		 * <i>native declaration : line 223</i>
		 */
		public static final int AV_OPT_TYPE_BINARY = 7;
		/** <i>native declaration : line 224</i> */
		public static final int AV_OPT_TYPE_CONST = 128;
		/**
		 * SKIPPED:<br>
		 * < offset must point to two consecutive integers<br>
		 * <i>native declaration : line 225</i><br>
		 * AV_OPT_TYPE_IMAGE_SIZE = MKBETAG('S', 'I', 'Z', 'E') ///< offset must point to two consecutive integers
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : line 226</i><br>
		 * AV_OPT_TYPE_PIXEL_FMT = MKBETAG('P', 'F', 'M', 'T')
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : line 227</i><br>
		 * AV_OPT_TYPE_SAMPLE_FMT = MKBETAG('S', 'F', 'M', 'T')
		 */
		/**
		 * SKIPPED:<br>
		 * < offset must point to AVRational<br>
		 * <i>native declaration : line 228</i><br>
		 * AV_OPT_TYPE_VIDEO_RATE = MKBETAG('V', 'R', 'A', 'T') ///< offset must point to AVRational
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : line 229</i><br>
		 * AV_OPT_TYPE_DURATION = MKBETAG('D', 'U', 'R', ' ')
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : line 230</i><br>
		 * AV_OPT_TYPE_COLOR = MKBETAG('C', 'O', 'L', 'R')
		 */
		/**
		 * SKIPPED:<br>
		 * <i>native declaration : line 231</i><br>
		 * AV_OPT_TYPE_CHANNEL_LAYOUT = MKBETAG('C', 'H', 'L', 'A')
		 */
	};
	/**
	 * Accept to parse a value without a key; the key will then be returned<br>
	 * as NULL.
	 */
	public static final int AV_OPT_FLAG_IMPLICIT_KEY = 1;
	public static final int AV_OPT_FLAG_DECODING_PARAM = (int)2;
	public static final int AV_OPT_FLAG_ENCODING_PARAM = (int)1;
	public static final int AV_OPT_FLAG_METADATA = (int)4;
	public static final int AV_OPT_FLAG_VIDEO_PARAM = (int)16;
	public static final int AV_OPT_SEARCH_FAKE_OBJ = (int)0x0002;
	public static final int AV_OPT_SEARCH_CHILDREN = (int)0x0001;
	public static final int AV_OPT_FLAG_SUBTITLE_PARAM = (int)32;
	public static final int AV_OPT_FLAG_FILTERING_PARAM = (int)(1 << 16);
	public static final int AV_OPT_FLAG_AUDIO_PARAM = (int)8;
	/**
	 * Show the obj options.<br>
	 * * @param req_flags requested flags for the options to show. Show only the<br>
	 * options for which it is opt->flags & req_flags.<br>
	 * @param rej_flags rejected flags for the options to show. Show only the<br>
	 * options for which it is !(opt->flags & req_flags).<br>
	 * @param av_log_obj log context to use for showing the options<br>
	 * Original signature : <code>int av_opt_show2(void*, void*, int, int)</code><br>
	 * <i>native declaration : line 383</i>
	 */
	public static native int av_opt_show2(Pointer obj, Pointer av_log_obj, int req_flags, int rej_flags);
	/**
	 * Set the values of all AVOption fields to their default values.<br>
	 * * @param s an AVOption-enabled struct (its first member must be a pointer to AVClass)<br>
	 * Original signature : <code>void av_opt_set_defaults(void*)</code><br>
	 * <i>native declaration : line 390</i>
	 */
	public static native void av_opt_set_defaults(Pointer s);
	/**
	 * Parse the key/value pairs list in opts. For each key/value pair<br>
	 * found, stores the value in the field in ctx that is named like the<br>
	 * key. ctx must be an AVClass context, storing is done using<br>
	 * AVOptions.<br>
	 * * @param opts options string to parse, may be NULL<br>
	 * @param key_val_sep a 0-terminated list of characters used to<br>
	 * separate key from value<br>
	 * @param pairs_sep a 0-terminated list of characters used to separate<br>
	 * two pairs from each other<br>
	 * @return the number of successfully set key/value pairs, or a negative<br>
	 * value corresponding to an AVERROR code in case of error:<br>
	 * AVERROR(EINVAL) if opts cannot be parsed,<br>
	 * the error code issued by av_set_string3() if a key/value pair<br>
	 * cannot be set<br>
	 * Original signature : <code>int av_set_options_string(void*, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : line 414</i><br>
	 * @deprecated use the safer methods {@link #av_set_options_string(com.sun.jna.Pointer, java.lang.String, java.lang.String, java.lang.String)} and {@link #av_set_options_string(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int av_set_options_string(Pointer ctx, Pointer opts, Pointer key_val_sep, Pointer pairs_sep);
	/**
	 * Parse the key/value pairs list in opts. For each key/value pair<br>
	 * found, stores the value in the field in ctx that is named like the<br>
	 * key. ctx must be an AVClass context, storing is done using<br>
	 * AVOptions.<br>
	 * * @param opts options string to parse, may be NULL<br>
	 * @param key_val_sep a 0-terminated list of characters used to<br>
	 * separate key from value<br>
	 * @param pairs_sep a 0-terminated list of characters used to separate<br>
	 * two pairs from each other<br>
	 * @return the number of successfully set key/value pairs, or a negative<br>
	 * value corresponding to an AVERROR code in case of error:<br>
	 * AVERROR(EINVAL) if opts cannot be parsed,<br>
	 * the error code issued by av_set_string3() if a key/value pair<br>
	 * cannot be set<br>
	 * Original signature : <code>int av_set_options_string(void*, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : line 414</i>
	 */
	public static native int av_set_options_string(Pointer ctx, String opts, String key_val_sep, String pairs_sep);
	/**
	 * Parse the key-value pairs list in opts. For each key=value pair found,<br>
	 * set the value of the corresponding option in ctx.<br>
	 * * @param ctx          the AVClass object to set options on<br>
	 * @param opts         the options string, key-value pairs separated by a<br>
	 *                     delimiter<br>
	 * @param shorthand    a NULL-terminated array of options names for shorthand<br>
	 *                     notation: if the first field in opts has no key part,<br>
	 *                     the key is taken from the first element of shorthand;<br>
	 *                     then again for the second, etc., until either opts is<br>
	 *                     finished, shorthand is finished or a named option is<br>
	 *                     found; after that, all options must be named<br>
	 * @param key_val_sep  a 0-terminated list of characters used to separate<br>
	 *                     key from value, for example '='<br>
	 * @param pairs_sep    a 0-terminated list of characters used to separate<br>
	 *                     two pairs from each other, for example ':' or ','<br>
	 * @return  the number of successfully set key=value pairs, or a negative<br>
	 *          value corresponding to an AVERROR code in case of error:<br>
	 *          AVERROR(EINVAL) if opts cannot be parsed,<br>
	 *          the error code issued by av_set_string3() if a key/value pair<br>
	 *          cannot be set<br>
	 * * Options names must use only the following characters: a-z A-Z 0-9 - . / _<br>
	 * Separators must use characters distinct from option names and from each<br>
	 * other.<br>
	 * Original signature : <code>int av_opt_set_from_string(void*, const char*, const const char**, const char*, const char*)</code><br>
	 * <i>native declaration : line 444</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_from_string(com.sun.jna.Pointer, java.lang.String, byte[][], java.lang.String, java.lang.String)} and {@link #av_opt_set_from_string(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int av_opt_set_from_string(Pointer ctx, Pointer opts, PointerByReference shorthand, Pointer key_val_sep, Pointer pairs_sep);
	/**
	 * Parse the key-value pairs list in opts. For each key=value pair found,<br>
	 * set the value of the corresponding option in ctx.<br>
	 * * @param ctx          the AVClass object to set options on<br>
	 * @param opts         the options string, key-value pairs separated by a<br>
	 *                     delimiter<br>
	 * @param shorthand    a NULL-terminated array of options names for shorthand<br>
	 *                     notation: if the first field in opts has no key part,<br>
	 *                     the key is taken from the first element of shorthand;<br>
	 *                     then again for the second, etc., until either opts is<br>
	 *                     finished, shorthand is finished or a named option is<br>
	 *                     found; after that, all options must be named<br>
	 * @param key_val_sep  a 0-terminated list of characters used to separate<br>
	 *                     key from value, for example '='<br>
	 * @param pairs_sep    a 0-terminated list of characters used to separate<br>
	 *                     two pairs from each other, for example ':' or ','<br>
	 * @return  the number of successfully set key=value pairs, or a negative<br>
	 *          value corresponding to an AVERROR code in case of error:<br>
	 *          AVERROR(EINVAL) if opts cannot be parsed,<br>
	 *          the error code issued by av_set_string3() if a key/value pair<br>
	 *          cannot be set<br>
	 * * Options names must use only the following characters: a-z A-Z 0-9 - . / _<br>
	 * Separators must use characters distinct from option names and from each<br>
	 * other.<br>
	 * Original signature : <code>int av_opt_set_from_string(void*, const char*, const const char**, const char*, const char*)</code><br>
	 * <i>native declaration : line 444</i>
	 */
	public static native int av_opt_set_from_string(Pointer ctx, String opts, byte[] shorthand[], String key_val_sep, String pairs_sep);
	/**
	 * Free all string and binary options in obj.<br>
	 * Original signature : <code>void av_opt_free(void*)</code><br>
	 * <i>native declaration : line 450</i>
	 */
	public static native void av_opt_free(Pointer obj);
	/**
	 * Check whether a particular flag is set in a flags field.<br>
	 * * @param field_name the name of the flag field option<br>
	 * @param flag_name the name of the flag to check<br>
	 * @return non-zero if the flag is set, zero if the flag isn't set,<br>
	 *         isn't of the right type, or the flags field doesn't exist.<br>
	 * Original signature : <code>int av_opt_flag_is_set(void*, const char*, const char*)</code><br>
	 * <i>native declaration : line 460</i><br>
	 * @deprecated use the safer methods {@link #av_opt_flag_is_set(com.sun.jna.Pointer, java.lang.String, java.lang.String)} and {@link #av_opt_flag_is_set(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int av_opt_flag_is_set(Pointer obj, Pointer field_name, Pointer flag_name);
	/**
	 * Check whether a particular flag is set in a flags field.<br>
	 * * @param field_name the name of the flag field option<br>
	 * @param flag_name the name of the flag to check<br>
	 * @return non-zero if the flag is set, zero if the flag isn't set,<br>
	 *         isn't of the right type, or the flags field doesn't exist.<br>
	 * Original signature : <code>int av_opt_flag_is_set(void*, const char*, const char*)</code><br>
	 * <i>native declaration : line 460</i>
	 */
	public static native int av_opt_flag_is_set(Pointer obj, String field_name, String flag_name);
	/**
	 * Set all the options from a given dictionary on an object.<br>
	 * * @param obj a struct whose first element is a pointer to AVClass<br>
	 * @param options options to process. This dictionary will be freed and replaced<br>
	 *                by a new one containing all options not found in obj.<br>
	 *                Of course this new dictionary needs to be freed by caller<br>
	 *                with av_dict_free().<br>
	 * * @return 0 on success, a negative AVERROR if some option was found in obj,<br>
	 *         but could not be set.<br>
	 * * @see av_dict_copy()<br>
	 * Original signature : <code>int av_opt_set_dict(void*, AVDictionary**)</code><br>
	 * <i>native declaration : line 476</i>
	 */
	public static native int av_opt_set_dict(Pointer obj, PointerByReference options);
	/**
	 * Set all the options from a given dictionary on an object.<br>
	 * * @param obj a struct whose first element is a pointer to AVClass<br>
	 * @param options options to process. This dictionary will be freed and replaced<br>
	 *                by a new one containing all options not found in obj.<br>
	 *                Of course this new dictionary needs to be freed by caller<br>
	 *                with av_dict_free().<br>
	 * * @return 0 on success, a negative AVERROR if some option was found in obj,<br>
	 *         but could not be set.<br>
	 * * @see av_dict_copy()<br>
	 * Original signature : <code>int av_opt_set_dict(void*, AVDictionary**)</code><br>
	 * <i>native declaration : line 476</i>
	 */
	public static native int av_opt_set_dict(Pointer obj, AVDictionary options[]);
	/**
	 * Extract a key-value pair from the beginning of a string.<br>
	 * * @param ropts        pointer to the options string, will be updated to<br>
	 *                     point to the rest of the string (one of the pairs_sep<br>
	 *                     or the final NUL)<br>
	 * @param key_val_sep  a 0-terminated list of characters used to separate<br>
	 *                     key from value, for example '='<br>
	 * @param pairs_sep    a 0-terminated list of characters used to separate<br>
	 *                     two pairs from each other, for example ':' or ','<br>
	 * @param flags        flags; see the AV_OPT_FLAG_* values below<br>
	 * @param rkey         parsed key; must be freed using av_free()<br>
	 * @param rval         parsed value; must be freed using av_free()<br>
	 * * @return  >=0 for success, or a negative value corresponding to an<br>
	 *          AVERROR code in case of error; in particular:<br>
	 *          AVERROR(EINVAL) if no key is present<br>
	 * Original signature : <code>int av_opt_get_key_value(const char**, const char*, const char*, unsigned, char**, char**)</code><br>
	 * <i>native declaration : line 497</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get_key_value(java.lang.String[], java.lang.String, java.lang.String, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} and {@link #av_opt_get_key_value(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_get_key_value(PointerByReference ropts, Pointer key_val_sep, Pointer pairs_sep, int flags, PointerByReference rkey, PointerByReference rval);
	/**
	 * Extract a key-value pair from the beginning of a string.<br>
	 * * @param ropts        pointer to the options string, will be updated to<br>
	 *                     point to the rest of the string (one of the pairs_sep<br>
	 *                     or the final NUL)<br>
	 * @param key_val_sep  a 0-terminated list of characters used to separate<br>
	 *                     key from value, for example '='<br>
	 * @param pairs_sep    a 0-terminated list of characters used to separate<br>
	 *                     two pairs from each other, for example ':' or ','<br>
	 * @param flags        flags; see the AV_OPT_FLAG_* values below<br>
	 * @param rkey         parsed key; must be freed using av_free()<br>
	 * @param rval         parsed value; must be freed using av_free()<br>
	 * * @return  >=0 for success, or a negative value corresponding to an<br>
	 *          AVERROR code in case of error; in particular:<br>
	 *          AVERROR(EINVAL) if no key is present<br>
	 * Original signature : <code>int av_opt_get_key_value(const char**, const char*, const char*, unsigned, char**, char**)</code><br>
	 * <i>native declaration : line 497</i>
	 */
	public static native int av_opt_get_key_value(String ropts[], String key_val_sep, String pairs_sep, int flags, PointerByReference rkey, PointerByReference rval);
	/**
	 * @defgroup opt_eval_funcs Evaluating option strings<br>
	 * @{<br>
	 * This group of functions can be used to evaluate option strings<br>
	 * and get numbers out of them. They do the same thing as av_opt_set(),<br>
	 * except the result is written into the caller-supplied pointer.<br>
	 * * @param obj a struct whose first element is a pointer to AVClass.<br>
	 * @param o an option for which the string is to be evaluated.<br>
	 * @param val string to be evaluated.<br>
	 * @param *_out value of the string will be written here.<br>
	 * * @return 0 on success, a negative number on failure.<br>
	 * Original signature : <code>int av_opt_eval_flags(void*, const AVOption*, const char*, int*)</code><br>
	 * <i>native declaration : line 525</i><br>
	 * @deprecated use the safer methods {@link #av_opt_eval_flags(com.sun.jna.Pointer, avutilopt.AVOption, java.lang.String, java.nio.IntBuffer)} and {@link #av_opt_eval_flags(com.sun.jna.Pointer, avutilopt.AVOption, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_eval_flags(Pointer obj, AVOption o, Pointer val, IntByReference flags_out);
	/**
	 * @defgroup opt_eval_funcs Evaluating option strings<br>
	 * @{<br>
	 * This group of functions can be used to evaluate option strings<br>
	 * and get numbers out of them. They do the same thing as av_opt_set(),<br>
	 * except the result is written into the caller-supplied pointer.<br>
	 * * @param obj a struct whose first element is a pointer to AVClass.<br>
	 * @param o an option for which the string is to be evaluated.<br>
	 * @param val string to be evaluated.<br>
	 * @param *_out value of the string will be written here.<br>
	 * * @return 0 on success, a negative number on failure.<br>
	 * Original signature : <code>int av_opt_eval_flags(void*, const AVOption*, const char*, int*)</code><br>
	 * <i>native declaration : line 525</i>
	 */
	public static native int av_opt_eval_flags(Pointer obj, AVOption o, String val, IntBuffer flags_out);
	/**
	 * Original signature : <code>int av_opt_eval_int(void*, const AVOption*, const char*, int*)</code><br>
	 * <i>native declaration : line 526</i><br>
	 * @deprecated use the safer methods {@link #av_opt_eval_int(com.sun.jna.Pointer, avutilopt.AVOption, java.lang.String, java.nio.IntBuffer)} and {@link #av_opt_eval_int(com.sun.jna.Pointer, avutilopt.AVOption, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_eval_int(Pointer obj, AVOption o, Pointer val, IntByReference int_out);
	/**
	 * Original signature : <code>int av_opt_eval_int(void*, const AVOption*, const char*, int*)</code><br>
	 * <i>native declaration : line 526</i>
	 */
	public static native int av_opt_eval_int(Pointer obj, AVOption o, String val, IntBuffer int_out);
	/**
	 * Original signature : <code>int av_opt_eval_int64(void*, const AVOption*, const char*, int64_t*)</code><br>
	 * <i>native declaration : line 527</i><br>
	 * @deprecated use the safer methods {@link #av_opt_eval_int64(com.sun.jna.Pointer, avutilopt.AVOption, java.lang.String, java.nio.LongBuffer)} and {@link #av_opt_eval_int64(com.sun.jna.Pointer, avutilopt.AVOption, com.sun.jna.Pointer, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_eval_int64(Pointer obj, AVOption o, Pointer val, LongByReference int64_out);
	/**
	 * Original signature : <code>int av_opt_eval_int64(void*, const AVOption*, const char*, int64_t*)</code><br>
	 * <i>native declaration : line 527</i>
	 */
	public static native int av_opt_eval_int64(Pointer obj, AVOption o, String val, LongBuffer int64_out);
	/**
	 * Original signature : <code>int av_opt_eval_float(void*, const AVOption*, const char*, float*)</code><br>
	 * <i>native declaration : line 528</i><br>
	 * @deprecated use the safer methods {@link #av_opt_eval_float(com.sun.jna.Pointer, avutilopt.AVOption, java.lang.String, java.nio.FloatBuffer)} and {@link #av_opt_eval_float(com.sun.jna.Pointer, avutilopt.AVOption, com.sun.jna.Pointer, com.sun.jna.ptr.FloatByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_eval_float(Pointer obj, AVOption o, Pointer val, FloatByReference float_out);
	/**
	 * Original signature : <code>int av_opt_eval_float(void*, const AVOption*, const char*, float*)</code><br>
	 * <i>native declaration : line 528</i>
	 */
	public static native int av_opt_eval_float(Pointer obj, AVOption o, String val, FloatBuffer float_out);
	/**
	 * Original signature : <code>int av_opt_eval_double(void*, const AVOption*, const char*, double*)</code><br>
	 * <i>native declaration : line 529</i><br>
	 * @deprecated use the safer methods {@link #av_opt_eval_double(com.sun.jna.Pointer, avutilopt.AVOption, java.lang.String, java.nio.DoubleBuffer)} and {@link #av_opt_eval_double(com.sun.jna.Pointer, avutilopt.AVOption, com.sun.jna.Pointer, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_eval_double(Pointer obj, AVOption o, Pointer val, DoubleByReference double_out);
	/**
	 * Original signature : <code>int av_opt_eval_double(void*, const AVOption*, const char*, double*)</code><br>
	 * <i>native declaration : line 529</i>
	 */
	public static native int av_opt_eval_double(Pointer obj, AVOption o, String val, DoubleBuffer double_out);
	/**
	 * Original signature : <code>int av_opt_eval_q(void*, const AVOption*, const char*, AVRational*)</code><br>
	 * <i>native declaration : line 530</i><br>
	 * @deprecated use the safer methods {@link #av_opt_eval_q(com.sun.jna.Pointer, avutilopt.AVOption, java.lang.String, avutilopt.AVUtilOptLibrary.AVRational)} and {@link #av_opt_eval_q(com.sun.jna.Pointer, avutilopt.AVOption, com.sun.jna.Pointer, avutilopt.AVUtilOptLibrary.AVRational)} instead
	 */
	@Deprecated 
	public static native int av_opt_eval_q(Pointer obj, AVOption o, Pointer val, AVRational q_out);
	/**
	 * Original signature : <code>int av_opt_eval_q(void*, const AVOption*, const char*, AVRational*)</code><br>
	 * <i>native declaration : line 530</i>
	 */
	public static native int av_opt_eval_q(Pointer obj, AVOption o, String val, AVRational q_out);
	/**
	 * Look for an option in an object. Consider only options which<br>
	 * have all the specified flags set.<br>
	 * * @param[in] obj A pointer to a struct whose first element is a<br>
	 *                pointer to an AVClass.<br>
	 *                Alternatively a double pointer to an AVClass, if<br>
	 *                AV_OPT_SEARCH_FAKE_OBJ search flag is set.<br>
	 * @param[in] name The name of the option to look for.<br>
	 * @param[in] unit When searching for named constants, name of the unit<br>
	 *                 it belongs to.<br>
	 * @param opt_flags Find only options with all the specified flags set (AV_OPT_FLAG).<br>
	 * @param search_flags A combination of AV_OPT_SEARCH_*.<br>
	 * * @return A pointer to the option found, or NULL if no option<br>
	 *         was found.<br>
	 * * @note Options found with AV_OPT_SEARCH_CHILDREN flag may not be settable<br>
	 * directly with av_set_string3(). Use special calls which take an options<br>
	 * AVDictionary (e.g. avformat_open_input()) to set options found with this<br>
	 * flag.<br>
	 * Original signature : <code>AVOption* av_opt_find(void*, const char*, const char*, int, int)</code><br>
	 * <i>native declaration : line 566</i><br>
	 * @deprecated use the safer methods {@link #av_opt_find(com.sun.jna.Pointer, java.lang.String, java.lang.String, int, int)} and {@link #av_opt_find(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	public static native AVOption av_opt_find(Pointer obj, Pointer name, Pointer unit, int opt_flags, int search_flags);
	/**
	 * Look for an option in an object. Consider only options which<br>
	 * have all the specified flags set.<br>
	 * * @param[in] obj A pointer to a struct whose first element is a<br>
	 *                pointer to an AVClass.<br>
	 *                Alternatively a double pointer to an AVClass, if<br>
	 *                AV_OPT_SEARCH_FAKE_OBJ search flag is set.<br>
	 * @param[in] name The name of the option to look for.<br>
	 * @param[in] unit When searching for named constants, name of the unit<br>
	 *                 it belongs to.<br>
	 * @param opt_flags Find only options with all the specified flags set (AV_OPT_FLAG).<br>
	 * @param search_flags A combination of AV_OPT_SEARCH_*.<br>
	 * * @return A pointer to the option found, or NULL if no option<br>
	 *         was found.<br>
	 * * @note Options found with AV_OPT_SEARCH_CHILDREN flag may not be settable<br>
	 * directly with av_set_string3(). Use special calls which take an options<br>
	 * AVDictionary (e.g. avformat_open_input()) to set options found with this<br>
	 * flag.<br>
	 * Original signature : <code>AVOption* av_opt_find(void*, const char*, const char*, int, int)</code><br>
	 * <i>native declaration : line 566</i>
	 */
	public static native AVOption av_opt_find(Pointer obj, String name, String unit, int opt_flags, int search_flags);
	/**
	 * Look for an option in an object. Consider only options which<br>
	 * have all the specified flags set.<br>
	 * * @param[in] obj A pointer to a struct whose first element is a<br>
	 *                pointer to an AVClass.<br>
	 *                Alternatively a double pointer to an AVClass, if<br>
	 *                AV_OPT_SEARCH_FAKE_OBJ search flag is set.<br>
	 * @param[in] name The name of the option to look for.<br>
	 * @param[in] unit When searching for named constants, name of the unit<br>
	 *                 it belongs to.<br>
	 * @param opt_flags Find only options with all the specified flags set (AV_OPT_FLAG).<br>
	 * @param search_flags A combination of AV_OPT_SEARCH_*.<br>
	 * @param[out] target_obj if non-NULL, an object to which the option belongs will be<br>
	 * written here. It may be different from obj if AV_OPT_SEARCH_CHILDREN is present<br>
	 * in search_flags. This parameter is ignored if search_flags contain<br>
	 * AV_OPT_SEARCH_FAKE_OBJ.<br>
	 * * @return A pointer to the option found, or NULL if no option<br>
	 *         was found.<br>
	 * Original signature : <code>AVOption* av_opt_find2(void*, const char*, const char*, int, int, void**)</code><br>
	 * <i>native declaration : line 590</i><br>
	 * @deprecated use the safer methods {@link #av_opt_find2(com.sun.jna.Pointer, java.lang.String, java.lang.String, int, int, com.sun.jna.ptr.PointerByReference)} and {@link #av_opt_find2(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native AVOption av_opt_find2(Pointer obj, Pointer name, Pointer unit, int opt_flags, int search_flags, PointerByReference target_obj);
	/**
	 * Look for an option in an object. Consider only options which<br>
	 * have all the specified flags set.<br>
	 * * @param[in] obj A pointer to a struct whose first element is a<br>
	 *                pointer to an AVClass.<br>
	 *                Alternatively a double pointer to an AVClass, if<br>
	 *                AV_OPT_SEARCH_FAKE_OBJ search flag is set.<br>
	 * @param[in] name The name of the option to look for.<br>
	 * @param[in] unit When searching for named constants, name of the unit<br>
	 *                 it belongs to.<br>
	 * @param opt_flags Find only options with all the specified flags set (AV_OPT_FLAG).<br>
	 * @param search_flags A combination of AV_OPT_SEARCH_*.<br>
	 * @param[out] target_obj if non-NULL, an object to which the option belongs will be<br>
	 * written here. It may be different from obj if AV_OPT_SEARCH_CHILDREN is present<br>
	 * in search_flags. This parameter is ignored if search_flags contain<br>
	 * AV_OPT_SEARCH_FAKE_OBJ.<br>
	 * * @return A pointer to the option found, or NULL if no option<br>
	 *         was found.<br>
	 * Original signature : <code>AVOption* av_opt_find2(void*, const char*, const char*, int, int, void**)</code><br>
	 * <i>native declaration : line 590</i>
	 */
	public static native AVOption av_opt_find2(Pointer obj, String name, String unit, int opt_flags, int search_flags, PointerByReference target_obj);
	/**
	 * Iterate over all AVOptions belonging to obj.<br>
	 * * @param obj an AVOptions-enabled struct or a double pointer to an<br>
	 *            AVClass describing it.<br>
	 * @param prev result of the previous call to av_opt_next() on this object<br>
	 *             or NULL<br>
	 * @return next AVOption or NULL<br>
	 * Original signature : <code>AVOption* av_opt_next(void*, const AVOption*)</code><br>
	 * <i>native declaration : line 602</i>
	 */
	public static native AVOption av_opt_next(Pointer obj, AVOption prev);
	/**
	 * Iterate over AVOptions-enabled children of obj.<br>
	 * * @param prev result of a previous call to this function or NULL<br>
	 * @return next AVOptions-enabled child or NULL<br>
	 * Original signature : <code>void* av_opt_child_next(void*, void*)</code><br>
	 * <i>native declaration : line 610</i>
	 */
	public static native Pointer av_opt_child_next(Pointer obj, Pointer prev);
	/**
	 * Iterate over potential AVOptions-enabled children of parent.<br>
	 * * @param prev result of a previous call to this function or NULL<br>
	 * @return AVClass corresponding to next potential child or NULL<br>
	 * Original signature : <code>AVClass* av_opt_child_class_next(const AVClass*, const AVClass*)</code><br>
	 * <i>native declaration : line 618</i><br>
	 * @deprecated use the safer methods {@link #av_opt_child_class_next(avutilopt.AVUtilOptLibrary.AVClass[], avutilopt.AVUtilOptLibrary.AVClass[])} and {@link #av_opt_child_class_next(avutilopt.AVUtilOptLibrary.AVClass, avutilopt.AVUtilOptLibrary.AVClass)} instead
	 */
	@Deprecated 
	public static native AVClass av_opt_child_class_next(AVClass parent, AVClass prev);
	/**
	 * Iterate over potential AVOptions-enabled children of parent.<br>
	 * * @param prev result of a previous call to this function or NULL<br>
	 * @return AVClass corresponding to next potential child or NULL<br>
	 * Original signature : <code>AVClass* av_opt_child_class_next(const AVClass*, const AVClass*)</code><br>
	 * <i>native declaration : line 618</i>
	 */
	public static native AVClass av_opt_child_class_next(AVClass parent[], AVClass prev[]);
	/**
	 * @defgroup opt_set_funcs Option setting functions<br>
	 * @{<br>
	 * Those functions set the field of obj with the given name to value.<br>
	 * * @param[in] obj A struct whose first element is a pointer to an AVClass.<br>
	 * @param[in] name the name of the field to set<br>
	 * @param[in] val The value to set. In case of av_opt_set() if the field is not<br>
	 * of a string type, then the given string is parsed.<br>
	 * SI postfixes and some named scalars are supported.<br>
	 * If the field is of a numeric type, it has to be a numeric or named<br>
	 * scalar. Behavior with more than one scalar and +- infix operators<br>
	 * is undefined.<br>
	 * If the field is of a flags type, it has to be a sequence of numeric<br>
	 * scalars or named flags separated by '+' or '-'. Prefixing a flag<br>
	 * with '+' causes it to be set without affecting the other flags;<br>
	 * similarly, '-' unsets a flag.<br>
	 * @param search_flags flags passed to av_opt_find2. I.e. if AV_OPT_SEARCH_CHILDREN<br>
	 * is passed here, then the option may be set on a child of obj.<br>
	 * * @return 0 if the value has been set, or an AVERROR code in case of<br>
	 * error:<br>
	 * AVERROR_OPTION_NOT_FOUND if no matching option exists<br>
	 * AVERROR(ERANGE) if the value is out of range<br>
	 * AVERROR(EINVAL) if the value is not valid<br>
	 * Original signature : <code>int av_opt_set(void*, const char*, const char*, int)</code><br>
	 * <i>native declaration : line 646</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set(com.sun.jna.Pointer, java.lang.String, java.lang.String, int)} and {@link #av_opt_set(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_set(Pointer obj, Pointer name, Pointer val, int search_flags);
	/**
	 * @defgroup opt_set_funcs Option setting functions<br>
	 * @{<br>
	 * Those functions set the field of obj with the given name to value.<br>
	 * * @param[in] obj A struct whose first element is a pointer to an AVClass.<br>
	 * @param[in] name the name of the field to set<br>
	 * @param[in] val The value to set. In case of av_opt_set() if the field is not<br>
	 * of a string type, then the given string is parsed.<br>
	 * SI postfixes and some named scalars are supported.<br>
	 * If the field is of a numeric type, it has to be a numeric or named<br>
	 * scalar. Behavior with more than one scalar and +- infix operators<br>
	 * is undefined.<br>
	 * If the field is of a flags type, it has to be a sequence of numeric<br>
	 * scalars or named flags separated by '+' or '-'. Prefixing a flag<br>
	 * with '+' causes it to be set without affecting the other flags;<br>
	 * similarly, '-' unsets a flag.<br>
	 * @param search_flags flags passed to av_opt_find2. I.e. if AV_OPT_SEARCH_CHILDREN<br>
	 * is passed here, then the option may be set on a child of obj.<br>
	 * * @return 0 if the value has been set, or an AVERROR code in case of<br>
	 * error:<br>
	 * AVERROR_OPTION_NOT_FOUND if no matching option exists<br>
	 * AVERROR(ERANGE) if the value is out of range<br>
	 * AVERROR(EINVAL) if the value is not valid<br>
	 * Original signature : <code>int av_opt_set(void*, const char*, const char*, int)</code><br>
	 * <i>native declaration : line 646</i>
	 */
	public static native int av_opt_set(Pointer obj, String name, String val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_int(void*, const char*, int64_t, int)</code><br>
	 * <i>native declaration : line 647</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_int(com.sun.jna.Pointer, java.lang.String, long, int)} and {@link #av_opt_set_int(com.sun.jna.Pointer, com.sun.jna.Pointer, long, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_set_int(Pointer obj, Pointer name, long val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_int(void*, const char*, int64_t, int)</code><br>
	 * <i>native declaration : line 647</i>
	 */
	public static native int av_opt_set_int(Pointer obj, String name, long val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_double(void*, const char*, double, int)</code><br>
	 * <i>native declaration : line 648</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_double(com.sun.jna.Pointer, java.lang.String, double, int)} and {@link #av_opt_set_double(com.sun.jna.Pointer, com.sun.jna.Pointer, double, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_set_double(Pointer obj, Pointer name, double val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_double(void*, const char*, double, int)</code><br>
	 * <i>native declaration : line 648</i>
	 */
	public static native int av_opt_set_double(Pointer obj, String name, double val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_q(void*, const char*, AVRational, int)</code><br>
	 * <i>native declaration : line 649</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_q(com.sun.jna.Pointer, java.lang.String, avutilopt.AVUtilOptLibrary.AVRational, int)} and {@link #av_opt_set_q(com.sun.jna.Pointer, com.sun.jna.Pointer, avutilopt.AVUtilOptLibrary.AVRational, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_set_q(Pointer obj, Pointer name, AVRational val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_q(void*, const char*, AVRational, int)</code><br>
	 * <i>native declaration : line 649</i>
	 */
	public static native int av_opt_set_q(Pointer obj, String name, AVRational val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_bin(void*, const char*, const uint8_t*, int, int)</code><br>
	 * <i>native declaration : line 650</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_bin(com.sun.jna.Pointer, java.lang.String, byte[], int, int)} and {@link #av_opt_set_bin(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	//public static native int av_opt_set_bin(Pointer obj, Pointer name, Pointer val, int size, int search_flags);
	
	
	public static native int av_opt_set_bin(Pointer obj, String name, Pointer val, int size, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_bin(void*, const char*, const uint8_t*, int, int)</code><br>
	 * <i>native declaration : line 650</i>
	 */
	//public static native int av_opt_set_bin(Pointer obj, String name, byte val[], int size, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_image_size(void*, const char*, int, int, int)</code><br>
	 * <i>native declaration : line 651</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_image_size(com.sun.jna.Pointer, java.lang.String, int, int, int)} and {@link #av_opt_set_image_size(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_set_image_size(Pointer obj, Pointer name, int w, int h, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_image_size(void*, const char*, int, int, int)</code><br>
	 * <i>native declaration : line 651</i>
	 */
	public static native int av_opt_set_image_size(Pointer obj, String name, int w, int h, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_pixel_fmt(void*, const char*, AVPixelFormat, int)</code><br>
	 * <i>native declaration : line 652</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_pixel_fmt(com.sun.jna.Pointer, java.lang.String, int, int)} and {@link #av_opt_set_pixel_fmt(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_set_pixel_fmt(Pointer obj, Pointer name, int fmt, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_pixel_fmt(void*, const char*, AVPixelFormat, int)</code><br>
	 * <i>native declaration : line 652</i>
	 */
	public static native int av_opt_set_pixel_fmt(Pointer obj, String name, int fmt, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_sample_fmt(void*, const char*, AVSampleFormat, int)</code><br>
	 * <i>native declaration : line 653</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_sample_fmt(com.sun.jna.Pointer, java.lang.String, int, int)} and {@link #av_opt_set_sample_fmt(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_set_sample_fmt(Pointer obj, Pointer name, int fmt, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_sample_fmt(void*, const char*, AVSampleFormat, int)</code><br>
	 * <i>native declaration : line 653</i>
	 */
	public static native int av_opt_set_sample_fmt(Pointer obj, String name, int fmt, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_video_rate(void*, const char*, AVRational, int)</code><br>
	 * <i>native declaration : line 654</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_video_rate(com.sun.jna.Pointer, java.lang.String, avutilopt.AVUtilOptLibrary.AVRational, int)} and {@link #av_opt_set_video_rate(com.sun.jna.Pointer, com.sun.jna.Pointer, avutilopt.AVUtilOptLibrary.AVRational, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_set_video_rate(Pointer obj, Pointer name, AVRational val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_video_rate(void*, const char*, AVRational, int)</code><br>
	 * <i>native declaration : line 654</i>
	 */
	public static native int av_opt_set_video_rate(Pointer obj, String name, AVRational val, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_channel_layout(void*, const char*, int64_t, int)</code><br>
	 * <i>native declaration : line 655</i><br>
	 * @deprecated use the safer methods {@link #av_opt_set_channel_layout(com.sun.jna.Pointer, java.lang.String, long, int)} and {@link #av_opt_set_channel_layout(com.sun.jna.Pointer, com.sun.jna.Pointer, long, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_set_channel_layout(Pointer obj, Pointer name, long ch_layout, int search_flags);
	/**
	 * Original signature : <code>int av_opt_set_channel_layout(void*, const char*, int64_t, int)</code><br>
	 * <i>native declaration : line 655</i>
	 */
	public static native int av_opt_set_channel_layout(Pointer obj, String name, long ch_layout, int search_flags);
	/**
	 * @note the returned string will be av_malloc()ed and must be av_free()ed by the caller<br>
	 * Original signature : <code>int av_opt_get(void*, const char*, int, uint8_t**)</code><br>
	 * <i>native declaration : line 691</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get(com.sun.jna.Pointer, java.lang.String, int, com.sun.jna.ptr.PointerByReference)} and {@link #av_opt_get(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_get(Pointer obj, Pointer name, int search_flags, PointerByReference out_val);
	/**
	 * @note the returned string will be av_malloc()ed and must be av_free()ed by the caller<br>
	 * Original signature : <code>int av_opt_get(void*, const char*, int, uint8_t**)</code><br>
	 * <i>native declaration : line 691</i>
	 */
	public static native int av_opt_get(Pointer obj, String name, int search_flags, PointerByReference out_val);
	/**
	 * Original signature : <code>int av_opt_get_int(void*, const char*, int, int64_t*)</code><br>
	 * <i>native declaration : line 692</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get_int(com.sun.jna.Pointer, java.lang.String, int, java.nio.LongBuffer)} and {@link #av_opt_get_int(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_get_int(Pointer obj, Pointer name, int search_flags, LongByReference out_val);
	/**
	 * Original signature : <code>int av_opt_get_int(void*, const char*, int, int64_t*)</code><br>
	 * <i>native declaration : line 692</i>
	 */
	public static native int av_opt_get_int(Pointer obj, String name, int search_flags, LongBuffer out_val);
	/**
	 * Original signature : <code>int av_opt_get_double(void*, const char*, int, double*)</code><br>
	 * <i>native declaration : line 693</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get_double(com.sun.jna.Pointer, java.lang.String, int, java.nio.DoubleBuffer)} and {@link #av_opt_get_double(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.DoubleByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_get_double(Pointer obj, Pointer name, int search_flags, DoubleByReference out_val);
	/**
	 * Original signature : <code>int av_opt_get_double(void*, const char*, int, double*)</code><br>
	 * <i>native declaration : line 693</i>
	 */
	public static native int av_opt_get_double(Pointer obj, String name, int search_flags, DoubleBuffer out_val);
	/**
	 * Original signature : <code>int av_opt_get_q(void*, const char*, int, AVRational*)</code><br>
	 * <i>native declaration : line 694</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get_q(com.sun.jna.Pointer, java.lang.String, int, avutilopt.AVUtilOptLibrary.AVRational)} and {@link #av_opt_get_q(com.sun.jna.Pointer, com.sun.jna.Pointer, int, avutilopt.AVUtilOptLibrary.AVRational)} instead
	 */
	@Deprecated 
	public static native int av_opt_get_q(Pointer obj, Pointer name, int search_flags, AVRational out_val);
	/**
	 * Original signature : <code>int av_opt_get_q(void*, const char*, int, AVRational*)</code><br>
	 * <i>native declaration : line 694</i>
	 */
	public static native int av_opt_get_q(Pointer obj, String name, int search_flags, AVRational out_val);
	/**
	 * Original signature : <code>int av_opt_get_image_size(void*, const char*, int, int*, int*)</code><br>
	 * <i>native declaration : line 695</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get_image_size(com.sun.jna.Pointer, java.lang.String, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #av_opt_get_image_size(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_get_image_size(Pointer obj, Pointer name, int search_flags, IntByReference w_out, IntByReference h_out);
	/**
	 * Original signature : <code>int av_opt_get_image_size(void*, const char*, int, int*, int*)</code><br>
	 * <i>native declaration : line 695</i>
	 */
	public static native int av_opt_get_image_size(Pointer obj, String name, int search_flags, IntBuffer w_out, IntBuffer h_out);
	/**
	 * Original signature : <code>int av_opt_get_pixel_fmt(void*, const char*, int, AVPixelFormat*)</code><br>
	 * <i>native declaration : line 696</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get_pixel_fmt(com.sun.jna.Pointer, java.lang.String, int, java.nio.IntBuffer)} and {@link #av_opt_get_pixel_fmt(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_get_pixel_fmt(Pointer obj, Pointer name, int search_flags, IntByReference out_fmt);
	/**
	 * Original signature : <code>int av_opt_get_pixel_fmt(void*, const char*, int, AVPixelFormat*)</code><br>
	 * <i>native declaration : line 696</i>
	 */
	public static native int av_opt_get_pixel_fmt(Pointer obj, String name, int search_flags, IntBuffer out_fmt);
	/**
	 * Original signature : <code>int av_opt_get_sample_fmt(void*, const char*, int, AVSampleFormat*)</code><br>
	 * <i>native declaration : line 697</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get_sample_fmt(com.sun.jna.Pointer, java.lang.String, int, java.nio.IntBuffer)} and {@link #av_opt_get_sample_fmt(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_get_sample_fmt(Pointer obj, Pointer name, int search_flags, IntByReference out_fmt);
	/**
	 * Original signature : <code>int av_opt_get_sample_fmt(void*, const char*, int, AVSampleFormat*)</code><br>
	 * <i>native declaration : line 697</i>
	 */
	public static native int av_opt_get_sample_fmt(Pointer obj, String name, int search_flags, IntBuffer out_fmt);
	/**
	 * Original signature : <code>int av_opt_get_video_rate(void*, const char*, int, AVRational*)</code><br>
	 * <i>native declaration : line 698</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get_video_rate(com.sun.jna.Pointer, java.lang.String, int, avutilopt.AVUtilOptLibrary.AVRational)} and {@link #av_opt_get_video_rate(com.sun.jna.Pointer, com.sun.jna.Pointer, int, avutilopt.AVUtilOptLibrary.AVRational)} instead
	 */
	@Deprecated 
	public static native int av_opt_get_video_rate(Pointer obj, Pointer name, int search_flags, AVRational out_val);
	/**
	 * Original signature : <code>int av_opt_get_video_rate(void*, const char*, int, AVRational*)</code><br>
	 * <i>native declaration : line 698</i>
	 */
	public static native int av_opt_get_video_rate(Pointer obj, String name, int search_flags, AVRational out_val);
	/**
	 * Original signature : <code>int av_opt_get_channel_layout(void*, const char*, int, int64_t*)</code><br>
	 * <i>native declaration : line 699</i><br>
	 * @deprecated use the safer methods {@link #av_opt_get_channel_layout(com.sun.jna.Pointer, java.lang.String, int, java.nio.LongBuffer)} and {@link #av_opt_get_channel_layout(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	public static native int av_opt_get_channel_layout(Pointer obj, Pointer name, int search_flags, LongByReference ch_layout);
	/**
	 * Original signature : <code>int av_opt_get_channel_layout(void*, const char*, int, int64_t*)</code><br>
	 * <i>native declaration : line 699</i>
	 */
	public static native int av_opt_get_channel_layout(Pointer obj, String name, int search_flags, LongBuffer ch_layout);
	/**
	 * Gets a pointer to the requested field in a struct.<br>
	 * This function allows accessing a struct even when its fields are moved or<br>
	 * renamed since the application making the access has been compiled,<br>
	 * * @returns a pointer to the field, it can be cast to the correct type and read<br>
	 *          or written to.<br>
	 * Original signature : <code>void* av_opt_ptr(const AVClass*, void*, const char*)</code><br>
	 * <i>native declaration : line 711</i><br>
	 * @deprecated use the safer methods {@link #av_opt_ptr(avutilopt.AVUtilOptLibrary.AVClass[], com.sun.jna.Pointer, java.lang.String)} and {@link #av_opt_ptr(avutilopt.AVUtilOptLibrary.AVClass, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native Pointer av_opt_ptr(AVClass avclass, Pointer obj, Pointer name);
	/**
	 * Gets a pointer to the requested field in a struct.<br>
	 * This function allows accessing a struct even when its fields are moved or<br>
	 * renamed since the application making the access has been compiled,<br>
	 * * @returns a pointer to the field, it can be cast to the correct type and read<br>
	 *          or written to.<br>
	 * Original signature : <code>void* av_opt_ptr(const AVClass*, void*, const char*)</code><br>
	 * <i>native declaration : line 711</i>
	 */
	public static native Pointer av_opt_ptr(AVClass avclass[], Pointer obj, String name);
	/**
	 * Free an AVOptionRanges struct and set it to NULL.<br>
	 * Original signature : <code>void av_opt_freep_ranges(AVOptionRanges**)</code><br>
	 * <i>native declaration : line 716</i><br>
	 * @deprecated use the safer method {@link #av_opt_freep_ranges(avutilopt.AVOptionRanges.ByReference[])} instead
	 */
	@Deprecated 
	public static native void av_opt_freep_ranges(PointerByReference ranges);
	/**
	 * Free an AVOptionRanges struct and set it to NULL.<br>
	 * Original signature : <code>void av_opt_freep_ranges(AVOptionRanges**)</code><br>
	 * <i>native declaration : line 716</i>
	 */
	//public static native void av_opt_freep_ranges(ByReference ranges[]);
	/**
	 * Get a list of allowed ranges for the given option.<br>
	 * * The returned list may depend on other fields in obj like for example profile.<br>
	 * * @param flags is a bitmask of flags, undefined flags should not be set and should be ignored<br>
	 *              AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a AVClass instead of a full instance<br>
	 * * The result must be freed with av_opt_freep_ranges.<br>
	 * * @return >= 0 on success, a negative errro code otherwise<br>
	 * Original signature : <code>int av_opt_query_ranges(AVOptionRanges**, void*, const char*, int)</code><br>
	 * <i>native declaration : line 730</i><br>
	 * @deprecated use the safer methods {@link #av_opt_query_ranges(avutilopt.AVOptionRanges.ByReference[], com.sun.jna.Pointer, java.lang.String, int)} and {@link #av_opt_query_ranges(avutilopt.AVOptionRanges.ByReference[], com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_query_ranges(PointerByReference AVOptionRangesPtrPtr1, Pointer obj, Pointer key, int flags);
	/**
	 * Get a list of allowed ranges for the given option.<br>
	 * * The returned list may depend on other fields in obj like for example profile.<br>
	 * * @param flags is a bitmask of flags, undefined flags should not be set and should be ignored<br>
	 *              AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a AVClass instead of a full instance<br>
	 * * The result must be freed with av_opt_freep_ranges.<br>
	 * * @return >= 0 on success, a negative errro code otherwise<br>
	 * Original signature : <code>int av_opt_query_ranges(AVOptionRanges**, void*, const char*, int)</code><br>
	 * <i>native declaration : line 730</i>
	 */
	public static native int av_opt_query_ranges(Pointer AVOptionRangesPtrPtr1[], Pointer obj, String key, int flags);
	/**
	 * Get a list of allowed ranges for the given option.<br>
	 * * The returned list may depend on other fields in obj like for example profile.<br>
	 * * @param flags is a bitmask of flags, undefined flags should not be set and should be ignored<br>
	 *              AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a AVClass instead of a full instance<br>
	 * * The result must be freed with av_opt_freep_ranges.<br>
	 * * @return >= 0 on success, a negative errro code otherwise<br>
	 * Original signature : <code>int av_opt_query_ranges(AVOptionRanges**, void*, const char*, int)</code><br>
	 * <i>native declaration : line 730</i>
	 */
	public static native int av_opt_query_ranges(Pointer AVOptionRangesPtrPtr1[], Pointer obj, Pointer key, int flags);
	/**
	 * Get a default list of allowed ranges for the given option.<br>
	 * * This list is constructed without using the AVClass.query_ranges() callback<br>
	 * and can be used as fallback from within the callback.<br>
	 * * @param flags is a bitmask of flags, undefined flags should not be set and should be ignored<br>
	 *              AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a AVClass instead of a full instance<br>
	 * * The result must be freed with av_opt_free_ranges.<br>
	 * * @return >= 0 on success, a negative errro code otherwise<br>
	 * Original signature : <code>int av_opt_query_ranges_default(AVOptionRanges**, void*, const char*, int)</code><br>
	 * <i>native declaration : line 745</i><br>
	 * @deprecated use the safer methods {@link #av_opt_query_ranges_default(avutilopt.AVOptionRanges.ByReference[], com.sun.jna.Pointer, java.lang.String, int)} and {@link #av_opt_query_ranges_default(avutilopt.AVOptionRanges.ByReference[], com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	public static native int av_opt_query_ranges_default(PointerByReference AVOptionRangesPtrPtr1, Pointer obj, Pointer key, int flags);
	/**
	 * Get a default list of allowed ranges for the given option.<br>
	 * * This list is constructed without using the AVClass.query_ranges() callback<br>
	 * and can be used as fallback from within the callback.<br>
	 * * @param flags is a bitmask of flags, undefined flags should not be set and should be ignored<br>
	 *              AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a AVClass instead of a full instance<br>
	 * * The result must be freed with av_opt_free_ranges.<br>
	 * * @return >= 0 on success, a negative errro code otherwise<br>
	 * Original signature : <code>int av_opt_query_ranges_default(AVOptionRanges**, void*, const char*, int)</code><br>
	 * <i>native declaration : line 745</i>
	 */
	public static native int av_opt_query_ranges_default(Pointer AVOptionRangesPtrPtr1[], Pointer obj, String key, int flags);
	/**
	 * Get a default list of allowed ranges for the given option.<br>
	 * * This list is constructed without using the AVClass.query_ranges() callback<br>
	 * and can be used as fallback from within the callback.<br>
	 * * @param flags is a bitmask of flags, undefined flags should not be set and should be ignored<br>
	 *              AV_OPT_SEARCH_FAKE_OBJ indicates that the obj is a double pointer to a AVClass instead of a full instance<br>
	 * * The result must be freed with av_opt_free_ranges.<br>
	 * * @return >= 0 on success, a negative errro code otherwise<br>
	 * Original signature : <code>int av_opt_query_ranges_default(AVOptionRanges**, void*, const char*, int)</code><br>
	 * <i>native declaration : line 745</i>
	 */
	public static native int av_opt_query_ranges_default(Pointer AVOptionRangesPtrPtr1[], Pointer obj, Pointer key, int flags);
	public static class AVOptionRanges extends PointerType {
		public AVOptionRanges(Pointer address) {
			super(address);
		}
		public AVOptionRanges() {
			super();
		}
	};
	
}
