package com.yw.ffmpegj.libswr;


import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.yw.ffmpegj.libavutil.AVClass;
/**
 * JNA Wrapper for library <b>avswresample</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface AVSwresampleLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "swresample-0";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(JNA_LIBRARY_NAME);
	public static final AVSwresampleLibrary INSTANCE = (AVSwresampleLibrary)Native.loadLibrary(JNA_LIBRARY_NAME, AVSwresampleLibrary.class);
	public static interface SwrDitherType {
		public static final int SWR_DITHER_NONE = 0;
		public static final int SWR_DITHER_RECTANGULAR = 1;
		public static final int SWR_DITHER_TRIANGULAR = 2;
		public static final int SWR_DITHER_TRIANGULAR_HIGHPASS = 3;
		public static final int SWR_DITHER_NS = 64;
		public static final int SWR_DITHER_NS_LIPSHITZ = 65;
		public static final int SWR_DITHER_NS_F_WEIGHTED = 66;
		public static final int SWR_DITHER_NS_MODIFIED_E_WEIGHTED = 67;
		public static final int SWR_DITHER_NS_IMPROVED_E_WEIGHTED = 68;
		public static final int SWR_DITHER_NS_SHIBATA = 69;
		public static final int SWR_DITHER_NS_LOW_SHIBATA = 70;
		public static final int SWR_DITHER_NS_HIGH_SHIBATA = 71;
		public static final int SWR_DITHER_NB = 72;
	};
	public static interface SwrEngine {
		public static final int SWR_ENGINE_SWR = 0;
		public static final int SWR_ENGINE_SOXR = 1;
		public static final int SWR_ENGINE_NB = 2;
	};
	public static interface SwrFilterType {
		public static final int SWR_FILTER_TYPE_CUBIC = 0;
		public static final int SWR_FILTER_TYPE_BLACKMAN_NUTTALL = 1;
		public static final int SWR_FILTER_TYPE_KAISER = 2;
	};
	public static final int SWR_CH_MAX = (int)32;
	public static final int SWR_FLAG_RESAMPLE = (int)1;
	AVClass swr_get_class();
	Pointer swr_alloc();
	
	int swr_init(Pointer s);

	
	//PointerByReference swr_alloc_set_opts(Pointer s, long out_ch_layout, int out_sample_fmt, int out_sample_rate, long in_ch_layout, int in_sample_fmt, int in_sample_rate, int log_offset, Pointer log_ctx);
	Pointer swr_alloc_set_opts(Pointer s, long out_ch_layout, int out_sample_fmt, int out_sample_rate, long in_ch_layout, int in_sample_fmt, int in_sample_rate, int log_offset, Pointer log_ctx);
	void swr_free(PointerByReference s);
	
	int swr_convert(Pointer s, PointerByReference out, int out_count, PointerByReference in, int in_count);
	//int swr_convert(PointerByReference s, PointerByReference out, int out_count, PointerByReference in, int in_count);
	@Deprecated 
	long swr_next_pts(Pointer s, long pts);
	long swr_next_pts(PointerByReference s, long pts);
	
	int swr_set_compensation(Pointer s, int sample_delta, int compensation_distance);
	
	@Deprecated 
	int swr_set_channel_mapping(Pointer s, IntByReference channel_map);
	int swr_set_channel_mapping(PointerByReference s, int channel_map[]);
	int swr_set_channel_mapping(PointerByReference s, IntByReference channel_map);
	@Deprecated 
	int swr_set_matrix(Pointer s, DoubleByReference matrix, int stride);
	int swr_set_matrix(PointerByReference s, double matrix[], int stride);
	int swr_set_matrix(PointerByReference s, DoubleByReference matrix, int stride);
	@Deprecated 
	int swr_drop_output(Pointer s, int count);
	int swr_drop_output(PointerByReference s, int count);
	@Deprecated 
	int swr_inject_silence(Pointer s, int count);
	int swr_inject_silence(PointerByReference s, int count);
	@Deprecated 
	long swr_get_delay(Pointer s, long base);
	long swr_get_delay(PointerByReference s, long base);
	int swresample_version();
	Pointer swresample_configuration();
	Pointer swresample_license();
	/** Pointer to unknown (opaque) type */

	/** Pointer to unknown (opaque) type */
	public static class SwrContext extends PointerType {
		public SwrContext(Pointer address) {
			super(address);
		}
		public SwrContext() {
			super();
		}
	};
	
	//void swr_free(PointerByReference s);
	

}

